--- /mnt/data/2021_11_multi_chunk_repair/APRConfig/results_defects4j/defects4j_Closure_10/defects4j_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java	2022-05-03 22:06:55.116341317 -0400
+++ /mnt/data/2021_11_multi_chunk_repair/APRConfig/results_defects4j/defects4j_Closure_10/mcrepair_sfl/patch/susp_2/donor_1/patch_0/NodeUtil.java	2022-05-04 00:07:27.395485675 -0400
@@ -1259,20 +1259,26 @@
    * all possible result Nodes of the expression.
    */
   static boolean allResultsMatch(Node n, Predicate<Node> p) {
-    switch (n.getType()) {
-      case Token.ASSIGN:
-      case Token.COMMA:
-        return allResultsMatch(n.getLastChild(), p);
-      case Token.AND:
-      case Token.OR:
-        return allResultsMatch(n.getFirstChild(), p)
-            && allResultsMatch(n.getLastChild(), p);
-      case Token.HOOK:
-        return allResultsMatch(n.getFirstChild().getNext(), p)
-            && allResultsMatch(n.getLastChild(), p);
-      default:
-        return p.apply(n);
-    }
+    if (p.apply(n)) {
+return true;
+}
+else {
+if (!p.apply(n)) {
+return false;
+}
+else {
+Node c = n.getFirstChild();while (n != null) {
+if (allResultsMatch(n.getLastChild(),p)) {
+return true;
+}
+
+}
+return false;
+}
+
+}
+
+
   }
 
   /**

